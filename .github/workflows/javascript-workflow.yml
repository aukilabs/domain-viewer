name: JavaScript workflow

on:
  workflow_call:
    secrets:
      aws_access_key:
        required: false
      aws_secret_access_key:
        required: false
      aws_region:
        required: false
      argocd_host:
        type: string
        required: false
      argocd_password:
        required: false
      npm_publisher_token:
        required: false
    inputs:
      enable_build:
        default: false
        type: boolean
      enable_tag_latest:
        default: false
        type: boolean
      enable_sync:
        default: false
        type: boolean
      enable_restart:
        default: false
        type: boolean
      image_name:
        required: false
        type: string
      argocd_app:
        type: string
        required: false
jobs:
  build:
    name: JavaScript Build
    runs-on: ubuntu-latest
    steps:
      - name: Configure environment
        run: |
          image_name="${{ github.event.repository.name }}"
          if [ -n "${{ inputs.image_name }}" ]; then
            image_name="${{ inputs.image_name }}"
          fi
          lowercase_image_name="${image_name,,}"
          echo "IMAGE_NAME=${lowercase_image_name}" >> $GITHUB_ENV
          argocd_app="${lowercase_image_name}"
          if [ -n "${{ inputs.argocd_app }}" ]; then
            argocd_app="${{ inputs.argocd_app }}"
          fi
          lowercase_argocd_app="${argocd_app,,}"
          echo "ARGOCD_APP=${lowercase_argocd_app}" >> $GITHUB_ENV
      - name: Check out code
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        if: ${{ inputs.enable_build  }}
        with:
          aws-access-key-id: ${{ secrets.aws_access_key }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: ${{ secrets.aws_region }}
      - name: Login to AWS ECR
        if: ${{ inputs.enable_build  }}
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2
      - name: Set up Docker Buildx
        if: ${{ inputs.enable_build  }}
        uses: docker/setup-buildx-action@v3
      - name: Docker build and push
        if: ${{ inputs.enable_build }}
        run: |
          # Branch or tag name with / replaced by __
          ref_name_tag="$(echo "${{ github.ref_name }}" | sed 's@/@__@g')"

          tags="-t ${{ steps.ecr-login.outputs.registry }}/${IMAGE_NAME}:${{ github.sha }} -t ${{ steps.ecr-login.outputs.registry }}/${IMAGE_NAME}:${ref_name_tag}"
          test "${{ inputs.enable_tag_latest }}" = "true" && tags="${tags} -t ${{ steps.ecr-login.outputs.registry }}/${IMAGE_NAME}:latest"

          docker buildx create --use
          docker buildx build --platform linux/amd64 $tags --push .

      - name: Wait for ECR image replication
        if: ${{ inputs.enable_sync || inputs.enable_restart }}
        run: |
          sleep 5
          rounds=15
          for i in $(seq 1 ${rounds}); do
            echo "Waiting for ECR image replication to finish (${i}/${rounds})..."
            aws ecr describe-image-replication-status --repository-name "${IMAGE_NAME}" --image-id "imageTag=${{ github.sha }}" --region "${{ secrets.aws_region }}" --output text | grep IN_PROGRESS || break
            sleep 10
          done
      - name: Authenticate ArgoCD
        uses: clowdhaus/argo-cd-action@v2.3.0
        if: ${{ inputs.enable_sync || inputs.enable_restart }}
        with:
          command: login
          options: --username admin --password "${{ secrets.argocd_password }}" --grpc-web "${{ secrets.argocd_host }}:443"
      - name: Sync ArgoCD app
        uses: clowdhaus/argo-cd-action@v2.3.0
        if: ${{ inputs.enable_sync }}
        with:
          command: app sync "${{ env.ARGOCD_APP }}"
          options: --grpc-web --async
      - name: Restart ArgoCD app
        uses: clowdhaus/argo-cd-action@v2.3.0
        if: ${{ inputs.enable_restart }}
        with:
          command: app actions run "${{ env.ARGOCD_APP }}" restart
          options: --kind Deployment --resource-name "${{ env.ARGOCD_APP }}" --grpc-web
